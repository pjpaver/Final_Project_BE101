<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Item List</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            background-color: #f2f2f2;
            text-align: left;
        }

        .filter-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .actions button {
            margin: 0 5px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0, 0, 0);
            background-color: rgba(0, 0, 0, 0.4);
            padding-top: 60px;
        }

        .form-label {
            width: 150px;
            /* Fixed width for labels */
            font-size: 1rem;
            font-weight: bold;
        }

        /* Input and select box styling */
        .form-input {
            flex: 1;
            padding: 0.5rem;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        /* Textarea styling */
        textarea.form-input {
            resize: vertical;
            min-height: 80px;
        }

        /* Button styling */
        .submit-btn {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .close-btn {
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            background-color: #ad2833;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .submit-btn:hover {
            background-color: #45a049;
        }

        .close-btn:hover {
            background-color: #6f2424;
        }


        /* Optional: Styling for the modal if needed */
        .modal-content {
            background-color: white;
            padding: 20px;
            margin: auto;
            width: 40vw;
            border-radius: 5px;
        }

        .form-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
        }

        /* Each form row */
        .form-row {
            display: flex;
            flex-direction: row;
            align-items: center;
            gap: 1rem;
        }

        .flex-end {
            display: flex;
            justify-content: flex-end;
        }
    </style>
</head>

<body>
    <h1>Item List</h1>

    <div class="filter-container" style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <h4>Filter:</h4>
            <select id="category" name="category">
                <option value="All">All</option>
                <option value="Electronics">Electronics</option>
                <option value="Furniture">Furniture</option>
                <option value="Clothing">Clothing</option>
                <option value="Food">Food</option>
            </select>
        </div>
        <button id="openCreateModal" class="create-btn">Create New Item</button>
    </div>

    <table id="itemTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Description</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Data will be dynamically inserted here -->
        </tbody>
    </table>

    <!-- Modal for editing item -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeModal">&times;</span>
            <h2>Edit Item</h2>
            <form id="editItemForm" class="form-container">
                <div class="form-row">
                    <label for="name" class="form-label">Name</label>
                    <input type="hidden" id="id" name="id" class="form-input" />
                    <input type="text" id="name" name="name" class="form-input" required />
                </div>

                <div class="form-row">
                    <label for="category" class="form-label">Category</label>
                    <select id="categoryEdit" name="category" class="form-input" required>
                        <option value="Electronics">Electronics</option>
                        <option value="Furniture">Furniture</option>
                        <option value="Clothing">Clothing</option>
                        <option value="Food">Food</option>
                    </select>
                </div>

                <div class="form-row">
                    <label for="quantity" class="form-label">Quantity</label>
                    <input type="number" id="quantity" name="quantity" class="form-input" required />
                </div>

                <div class="form-row">
                    <label for="price" class="form-label">Price</label>
                    <input type="number" id="price" name="price" class="form-input" required />
                </div>

                <div class="form-row">
                    <label for="description" class="form-label">Description</label>
                    <textarea id="description" name="description" class="form-input" required></textarea>
                </div>

                <div class="form-row flex-end">
                    <button type="submit" class="submit-btn">Save</button>
                    <button id="closeModal" class="close-btn">Cancel</button>
                </div>
            </form>

        </div>
    </div>

    <!-- Modal for creating item -->
    <div id="createModal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeCreateModal">&times;</span>
            <h2>Create New Item</h2>
            <form id="CreateItemForm" class="form-container">
                <div class="form-row">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" id="name" name="name" class="form-input" required />
                </div>

                <div class="form-row">
                    <label for="category" class="form-label">Category</label>
                    <select id="categoryCreate" name="category" class="form-input" required>
                        <option value="Electronics">Electronics</option>
                        <option value="Furniture">Furniture</option>
                        <option value="Clothing">Clothing</option>
                        <option value="Food">Food</option>
                    </select>
                </div>

                <div class="form-row">
                    <label for="quantity" class="form-label">Quantity</label>
                    <input type="number" id="quantity" name="quantity" class="form-input" required />
                </div>

                <div class="form-row">
                    <label for="price" class="form-label">Price</label>
                    <input type="number" id="price" name="price" class="form-input" required />
                </div>

                <div class="form-row">
                    <label for="description" class="form-label">Description</label>
                    <textarea id="description" name="description" class="form-input" required></textarea>
                </div>

                <div class="form-row flex-end">
                    <button type="submit" class="submit-btn">Save</button>
                    <button type="button" id="closeCreateModalButton" class="close-btn">Cancel</button>
                </div>
            </form>
        </div>
    </div>





    <script>
        //create Item
        // Get modal and form elements
        const createModal = document.getElementById("createModal");
        const closeCreateModal = document.getElementById("closeCreateModal");
        const closeCreateModalButton = document.getElementById("closeCreateModalButton");
        const createItemForm = document.getElementById("CreateItemForm");

        // Function to close the modal
        function closeModal() {
            createModal.style.display = "none";
            createItemForm.reset(); // Reset form fields
        }

        // Close modal on close button click
        closeCreateModal.addEventListener("click", closeModal);
        closeCreateModalButton.addEventListener("click", closeModal);

        // Handle form submission
        createItemForm.addEventListener("submit", async (e) => {
            e.preventDefault(); // Prevent default form submission

            const formData = new FormData(createItemForm);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch("/items", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                if (!response.ok) {
                    throw new Error("Failed to create item");
                }

                const result = await response.json();
                console.log("Item created:", result);

                // Close the modal and reload the items list
                closeModal();
                loadItems(); // Assumes you have a loadItems function to refresh the table
            } catch (error) {
                console.error("Error creating item:", error);
                alert("Failed to create item. Please try again.");
            }
        });






        // Edit item
        function editItem(item) {
            console.log("EDITABLE:", item)
            // Populate the modal form with item data
            document.querySelector("#editItemForm input[name='name']").value = item.name;
            document.querySelector("#editItemForm select[name='category']").value = item.category; // Fix this line for 'categoryEdit'
            document.querySelector("#editItemForm input[name='quantity']").value = item.quantity;
            document.querySelector("#editItemForm input[name='price']").value = item.price;
            document.querySelector("#editItemForm textarea[name='description']").value = item.description;
            document.querySelector("#editItemForm input[name='id']").value = item.id;


            // Show modal
            document.querySelector("#editModal").style.display = "block";

            // Handle form submission
            document.getElementById("editItemForm").onsubmit = async function (e) {
                e.preventDefault();

                const updatedItem = {
                    _id: document.getElementById("id").value,
                    name: document.getElementById("name").value,
                    category: document.getElementById("categoryEdit").value,
                    quantity: document.getElementById("quantity").value,
                    price: document.getElementById("price").value,
                    description: document.getElementById("description").value
                };
                console.log("updatedItem:", updatedItem)

                try {
                    const response = await fetch(`/items/${updatedItem._id}`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(updatedItem)
                    });

                    if (!response.ok) throw new Error("Failed to update item");

                    // alert("Item updated successfully");
                    loadItems(); // Reload the items after update
                    document.getElementById("editModal").style.display = "none"; // Close the modal
                } catch (err) {
                    console.error("Error updating item:", err);
                    alert("Failed to update item.");
                }
            };
        }






        // Delete item
        async function deleteItem(id) {
            if (confirm("Are you sure you want to delete this item?")) {
                try {
                    const response = await fetch(`/items/${id}`, { method: "DELETE" });

                    if (!response.ok) throw new Error("Failed to delete item");

                    alert("Item deleted successfully");
                    loadItems(); // Reload the items after deletion
                } catch (err) {
                    console.error("Error deleting item:", err);
                    alert("Failed to delete item.");
                }
            }
        }





        // Function to fetch and render items
        async function loadItems() {
            try {
                const response = await fetch("/items");
                if (!response.ok) throw new Error("Failed to fetch items");

                const items = await response.json();
                const tableBody = document.querySelector("#itemTable tbody");

                // Clear existing rows
                tableBody.innerHTML = "";

                // Add rows for each item
                items.forEach(item => {
                    const row = document.createElement("tr");
                    // console.log("json:", JSON.stringify(item))
                    row.innerHTML = `
                        <td>${item.name}</td>
                        <td>${item.category}</td>
                        <td>${item.quantity}</td>
                        <td>${item.price}</td>
                        <td>${item.description}</td>
                        <td>${new Date(item.createdAt).toLocaleString()}</td>
                        <td class="actions">
                            <button class="edit-btn" data-id="${item._id}" 
                                data-name="${item.name}" data-category="${item.category}" 
                                data-quantity="${item.quantity}" data-price="${item.price}" 
                                data-description="${item.description}">
                            Edit
                        </button>
                            <button onclick="deleteItem('${item._id}')">Delete</button>
                        </td>
                    `;

                    tableBody.appendChild(row);
                });

                document.querySelectorAll('.edit-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const item = {
                            id: event.target.getAttribute('data-id'),
                            name: event.target.getAttribute('data-name'),
                            category: event.target.getAttribute('data-category'),
                            quantity: event.target.getAttribute('data-quantity'),
                            price: event.target.getAttribute('data-price'),
                            description: event.target.getAttribute('data-description')
                        };
                        console.log("edit:", item)
                        editItem(item); // Pass item object to edit function
                    });
                });

            } catch (err) {
                console.error("Error loading items:", err);
                alert("Failed to load items.");
            }
        }










        //filter dropdown function
        document.getElementById('category').addEventListener('change', async function () {
            const selectedCategory = this.value;  // Get selected category value

            // Fetch items based on the selected category
            try {
                const response = await fetch(`/items/filter/${selectedCategory}`);
                const items = await response.json(); // Assuming the response returns a JSON array of items
                console.log("filteered:", items)
                // Display items in the UI
                const tableBody = document.querySelector("#itemTable tbody");

                // Clear existing rows
                tableBody.innerHTML = "";

                // Add rows for each item
                items.forEach(item => {
                    const row = document.createElement("tr");
                    // console.log("json:", JSON.stringify(item))
                    row.innerHTML = `
                        <td>${item.name}</td>
                        <td>${item.category}</td>
                        <td>${item.quantity}</td>
                        <td>${item.price}</td>
                        <td>${item.description}</td>
                        <td>${new Date(item.createdAt).toLocaleString()}</td>
                        <td class="actions">
                            <button class="edit-btn" data-id="${item._id}" 
                                data-name="${item.name}" data-category="${item.category}" 
                                data-quantity="${item.quantity}" data-price="${item.price}" 
                                data-description="${item.description}">
                            Edit
                        </button>
                            <button onclick="deleteItem('${item._id}')">Delete</button>
                        </td>
                    `;

                    tableBody.appendChild(row);
                });

                document.querySelectorAll('.edit-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const item = {
                            id: event.target.getAttribute('data-id'),
                            name: event.target.getAttribute('data-name'),
                            category: event.target.getAttribute('data-category'),
                            quantity: event.target.getAttribute('data-quantity'),
                            price: event.target.getAttribute('data-price'),
                            description: event.target.getAttribute('data-description')
                        };
                        console.log("edit:", item)
                        editItem(item); // Pass item object to edit function
                    });
                });
            } catch (error) {
                console.error("Error fetching items:", error);
                alert("Failed to fetch items");
            }
        });

        // Close modal
        document.getElementById("closeModal").onclick = function () {
            document.getElementById("editModal").style.display = "none";
        };

        document.getElementById("openCreateModal").onclick = function () {
            document.getElementById("createModal").style.display = "block";
        };

        // Load items after the DOM is fully loaded
        document.addEventListener("DOMContentLoaded", loadItems);
    </script>
</body>

</html>